version: '3.1'

services:
  server0:
    container_name: server0
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "1099:1099"
    depends_on:
      redis0:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      zookeeper_kafka:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      REDIS_HOST: redis0
      REDIS_PORT: 6379
      REDIS_TRUSTSTORE: ./tls/truststore.jks
      REDIS_TRUSTSTORE_PASSWORD: temppass
      REDIS_KEYSTORE: ./tls/client-keystore.p12
      REDIS_KEYSTORE_PASSWORD: temppass
      REDIS_PASSWORD: password
      RMI_KEYSTORE: ./tls/Server_Keystore
      RMI_KEYSTORE_PASSWORD: password
      RMI_POLICY: ./ssl_security.policy
      ZOOKEEPER_SERVER: "zookeeper:2181"
      KAFKA_SERVER: "kafka:9092"
      ID_SERVER_HOST: localhost
      ID_SERVER_PORT: 1099
    healthcheck:
      test: netstat -ltn | grep ':1099' || exit 1
      interval: 3s
      timeout: 15s
      retries: 3

  client: # Used to test the server
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    network_mode: host

  redis0:
    container_name: redis0
    restart: always
    build:
      context: ./redis
      dockerfile: Dockerfile
    volumes:
      - redis-data0:/data
    healthcheck:
      test: redis-cli -h localhost -p 6379 -a password --tls --cert /app/tls/redis.crt --key /app/tls/redis.key --cacert /app/tls/ca.crt ping
      interval: 3s
      timeout: 15s
      retries: 3

  zookeeper: # zookeeper for IdServers
    container_name: zookeeper
    image: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
    healthcheck:
      test: wait 3 || exit 0
      interval: 10s
      timeout: 10s
      retries: 5

  zookeeper_kafka: # zookeeper for Kafka
    container_name: zookeeper_kafka
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 3000
      ZOOKEEPER_ADMIN_ENABLE_SERVER: "false" # Disable admin server to avoid port conflict
    healthcheck:
      test: wait 3 || exit 0 # Wait for zookeeper to start up - not an actual healthcheck
      interval: 10s
      timeout: 10s
      retries: 5

  kafka: # Only need one kafka broker
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: rack1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_kafka:2182
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis1:
    container_name: redis1
    extends:
      service: redis0
    volumes:
      - redis-data1:/data
  server1:
    container_name: server1
    extends:
      service: server0
    ports: !override
      - "1100:1099"
    environment:
      ID_SERVER_HOST: localhost
      ID_SERVER_PORT: 1100
      REDIS_HOST: redis1
  redis2:
    container_name: redis2
    extends:
      service: redis0
    volumes:
      - redis-data2:/data
  server2:
    container_name: server2
    extends:
      service: server0
    ports: !override
      - "1101:1099"
    environment:
      ID_SERVER_HOST: localhost
      ID_SERVER_PORT: 1101
      REDIS_HOST: redis2
volumes:
  redis-data0: {}
  redis-data1: {}
  redis-data2: {}
